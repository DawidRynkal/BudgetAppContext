{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","utils/index.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.css.js","pages/Budget/components/BudgetTransactionList/BudgetTransactionList.js","data/actions/budget.acions.js"],"names":["fetchBudget","a","fetch","process","response","console","log","json","data","fetchBudgetedCategories","addTransaction","budgetId","values","method","headers","body","JSON","stringify","fetchAllCategories","budget","common","formatCurrency","value","number","Number","Intl","NumberFormat","style","currency","format","formatDate","string","date","Date","DateTimeFormat","List","styled","ul","ListItem","li","connect","setTransacionDetails","details","type","SET_TRANSACTION_DETAILS_ID","payload","useQuery","API","allCategories","budgetedCategories","selectedCategoryId","useContext","BudgetContext","store","state","filteredTransactionsBySelectedParentCategory","useMemo","transactions","filter","transaction","some","budgetedCategory","categoryId","find","category","id","parentCategory","name","error","groupedTransactions","groupBy","getUTCDate","Object","entries","map","key","description","amount","to","variant","onClick","identity","categoryNumber"],"mappings":"wXACaA,EAAW,uCAAG,8BAAAC,EAAA,sEAEAC,MAAM,GAAD,OAAIC,gEAAJ,oCAFL,cAEjBC,EAFiB,OAGvBC,QAAQC,IAAIH,iEAHW,SAIJC,EAASG,OAJL,cAIjBC,EAJiB,yBAKhBA,GALgB,2CAAH,qDAQXC,EAAuB,uCAAG,8BAAAR,EAAA,sEACZC,MAAM,GAAD,OAAIC,gEAAJ,gCADO,cAC7BC,EAD6B,gBAEhBA,EAASG,OAFO,cAE7BC,EAF6B,yBAG5BA,GAH4B,2CAAH,qDAMvBE,EAAc,uCAAG,iCAAAT,EAAA,6DAASU,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,OAAnB,SACHV,MAAM,GAAD,OAAIC,gEAAJ,oBAA6CQ,EAA7C,iBACxB,CACIE,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUL,KAPH,cACpBR,EADoB,yBAWnBA,EAASG,QAXU,2CAAH,sDCbdW,EAAkB,uCAAG,8BAAAjB,EAAA,sEACPC,MAAM,GAAD,OAAIC,gEAAJ,wCADE,cACxBC,EADwB,OAExBI,EAAOJ,EAASG,OAFQ,kBAGvBC,GAHuB,2CAAH,qDCChB,KACXW,SACAC,W,gCCLJ,oEAAO,IAAMC,EAAiB,SAACC,GAC3B,IAAMC,EAASC,OAAOF,GAEtB,OAAO,IAAIG,KAAKC,aAAa,KAAM,CAAEC,MAAO,WAAYC,SAAU,QAASC,OAAON,IAGzEO,EAAa,SAAAC,GACtB,IAAMC,EAAO,IAAIC,KAAKF,GAEtB,OAAO,IAAIN,KAAKS,eAAe,MAAML,OAAOG,K,2lBCPzC,IAAMG,EAAOC,UAAOC,GAAV,KAMJC,EAAWF,UAAOG,GAAV,K,uCCwFNC,kBAAQ,KAAM,CACzBC,qBC3FgC,SAACC,GAEjC,MAAO,CACHC,KAAMC,IACNC,QAASH,KDsFFF,EAnFf,YAA0D,IAAzBC,EAAwB,EAAxBA,qBACftB,EAAW2B,YAAS,SAAUC,IAAI5B,OAAOnB,aAA/CQ,KACMwC,EAAkBF,YAAS,gBAAiBC,IAAI3B,OAAOF,oBAA7DV,KACMyC,EAAuBH,YACjC,qBACAC,IAAI5B,OAAOV,yBAFPD,KAKA0C,EADUC,qBAAWC,IAAcC,OAAnCC,MACAJ,mBAEFK,EAA+CC,mBAAQ,WACzD,MAAkC,qBAAvBN,EACA/B,EAAOsC,aAGS,OAAvBP,EACO/B,EAAOsC,aAAaC,QAAO,SAAAC,GAG9B,OAF4BV,EAAmBW,MAAK,SAAAC,GAAgB,OAAIA,EAAiBC,aAAeH,EAAYG,iBAOrH3C,EAAOsC,aACTC,QAAO,SAAAC,GACJ,IAKI,OAJiBX,EACZe,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAON,EAAYG,cACdI,eAAeC,OAErBjB,EAChC,MAAOkB,GACL,OAAO,QAKnB,CAACpB,EAAe7B,EAAOsC,aAAcR,EAAoBC,IAGvDmB,EAAsBb,mBAAQ,kBAAMc,kBAAQf,GAC9C,SAAAI,GAAW,OAAI,IAAI1B,KAAK0B,EAAY3B,MAAMuC,kBAC1C,CAAChB,IAYL,OACI,kBAACpB,EAAD,KACKqC,OAAOC,QAAQJ,GAAqBK,KAAI,mCAAOjB,GAAP,kBACrC,4BACI,4BACKA,EAAaiB,KAAI,SAAAf,GAAW,OAEzB,kBAACrB,EAAD,CAAUqC,IAAKhB,EAAYM,IACvB,6BAAMN,EAAYiB,aAClB,6BAAMvD,YAAesC,EAAYkB,SACjC,6BAAM/C,YAAW6B,EAAY3B,OAC7B,8BAAOgB,EACFe,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAON,EAAYG,eAAe,IAAIK,MACrE,kBAAC,IAAD,CACIW,GAAG,+BACHC,QAAQ,UACRC,QAAS,kBAzBFf,EAyBsCN,EAAYM,GAzB9CH,EAyBkDH,EAAYG,gBAxBrGrB,EAAqB,CACjBwC,SAAUhB,EACViB,eAAgBpB,IAHc,IAACG,EAAIH,IAsBf","file":"static/js/5.022a51fb.chunk.js","sourcesContent":["\r\nexport const fetchBudget = async () => {\r\n\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/1/?_embed=transactions`);\r\n    console.log(process.env.REACT_APP_API_URL)\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\nexport const fetchBudgetedCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/1/budgetCategories`);\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\nexport const addTransaction = async ({ budgetId, values }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n        {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(values)\r\n        });\r\n\r\n\r\n    return response.json();\r\n}\r\n\r\n","\r\n\r\nexport const fetchAllCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`);\r\n    const data = response.json();\r\n    return data;\r\n}","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nexport default {\r\n    budget,\r\n    common,\r\n}","export const formatCurrency = (value) => {\r\n    const number = Number(value);\r\n\r\n    return new Intl.NumberFormat('pl', { style: 'currency', currency: 'PLN' }).format(number);\r\n}\r\n\r\nexport const formatDate = string => {\r\n    const date = new Date(string);\r\n\r\n    return new Intl.DateTimeFormat('pl').format(date)\r\n}","import styled from 'styled-components'\r\n\r\nexport const List = styled.ul`\r\n> li + li {\r\n    margin-top: 10px;\r\n}\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\nmargin-left:10px;\r\nmargin-bottom:1px;\r\nborder: 1px solid black;\r\npadding: 10px;\r\ndisplay:flex;\r\njustify-content: space-between;\r\n> *:nth-child(1) {\r\n    flex: 4;\r\n}\r\n> *:nth-child(2) {\r\n    flex: 2;\r\n}\r\n> *:nth-child(3) {\r\n    flex: 3;\r\n}\r\n> *:nth-child(4) {\r\n    flex: 1;\r\n}\r\n`","import React, { useMemo, useContext } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useQuery } from 'react-query';\r\nimport API from 'data/fetch'\r\nimport { List, ListItem } from './BudgetTransactionList.css';\r\nimport { groupBy } from 'lodash';\r\nimport { formatCurrency, formatDate } from 'utils/index';\r\nimport { Button } from 'components';\r\nimport { setTransacionDetails } from 'data/actions/budget.acions';\r\nimport BudgetContext from 'data/context/budget.context'\r\n\r\n\r\n\r\nfunction BudgetTransactionList({ setTransacionDetails }) {\r\n    const { data: budget } = useQuery('budget', API.budget.fetchBudget);\r\n    const { data: allCategories } = useQuery('allCategories', API.common.fetchAllCategories);\r\n    const { data: budgetedCategories } = useQuery(\r\n        'budgetedCategories',\r\n        API.budget.fetchBudgetedCategories\r\n    );\r\n    const { state } = useContext(BudgetContext.store)\r\n    const { selectedCategoryId } = state;\r\n\r\n    const filteredTransactionsBySelectedParentCategory = useMemo(() => {\r\n        if (typeof selectedCategoryId === 'undefined') {\r\n            return budget.transactions;\r\n        }\r\n\r\n        if (selectedCategoryId === null) {\r\n            return budget.transactions.filter(transaction => {\r\n                const hasBudgetedCategory = budgetedCategories.some(budgetedCategory => budgetedCategory.categoryId === transaction.categoryId);\r\n\r\n                return !hasBudgetedCategory\r\n            })\r\n\r\n        }\r\n\r\n        return budget.transactions\r\n            .filter(transaction => {\r\n                try {\r\n                    const category = allCategories\r\n                        .find(category => category.id === transaction.categoryId);\r\n                    const parentCategoryName = category.parentCategory.name;\r\n\r\n                    return parentCategoryName === selectedCategoryId\r\n                } catch (error) {\r\n                    return false;\r\n                }\r\n\r\n            })\r\n    },\r\n        [allCategories, budget.transactions, budgetedCategories, selectedCategoryId]\r\n    )\r\n\r\n    const groupedTransactions = useMemo(() => groupBy(filteredTransactionsBySelectedParentCategory,\r\n        transaction => new Date(transaction.date).getUTCDate()),\r\n        [filteredTransactionsBySelectedParentCategory]\r\n    )\r\n\r\n    const handleClickTransactionDetails = (id, categoryId) => {\r\n        setTransacionDetails({\r\n            identity: id,\r\n            categoryNumber: categoryId,\r\n        });\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <List>\r\n            {Object.entries(groupedTransactions).map(([key, transactions]) => (\r\n                <li >\r\n                    <ul >\r\n                        {transactions.map(transaction => (\r\n\r\n                            <ListItem key={transaction.id}>\r\n                                <div>{transaction.description}</div>\r\n                                <div>{formatCurrency(transaction.amount)}</div>\r\n                                <div>{formatDate(transaction.date)}</div>\r\n                                <div>{(allCategories\r\n                                    .find(category => category.id === transaction.categoryId) || {}).name}</div>\r\n                                <Button\r\n                                    to=\"/budget/transactions/details\"\r\n                                    variant='regular'\r\n                                    onClick={() => handleClickTransactionDetails(transaction.id, transaction.categoryId)}\r\n                                > Show more</Button>\r\n                            </ListItem>\r\n                        ))}\r\n\r\n                    </ul>\r\n                </li>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default connect(null, {\r\n    setTransacionDetails,\r\n})(BudgetTransactionList)","import {\r\n    SET_SELECTED_CATEGORY_ID,\r\n    SET_TRANSACTION_DETAILS_ID,\r\n} from 'data/constans'\r\n\r\n\r\nexport const setTransacionDetails = (details) => {\r\n\r\n    return {\r\n        type: SET_TRANSACTION_DETAILS_ID,\r\n        payload: details,\r\n    }\r\n}\r\n\r\nexport const setSelectedCategoryId = (id) => {\r\n    return {\r\n        type: SET_SELECTED_CATEGORY_ID,\r\n        payload: id,\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}