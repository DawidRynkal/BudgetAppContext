{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","pages/Budget/components/AddTransactionForm/Styles.js","pages/Budget/components/AddTransactionForm/AddTransactionForm.js","pages/Budget/components/AddTransactionForm/AddTransactionView.js"],"names":["fetchBudget","a","fetch","process","response","console","log","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","fetchAllCategories","budget","common","btn","light","dark","css","btnDefault","btnPrimary","styled","div","required","value","undefined","AddTransactionForm","onSubmit","noop","categories","groupCategoriesBy","groupedCategoriesByParentName","groupBy","listItem","useMemo","Object","entries","map","parentName","key","label","category","id","name","Styles","render","handleSubmit","form","submitting","pristine","values","validate","input","meta","type","placeholder","error","touched","parse","parseFloat","step","className","disabled","onClick","reset","AddTransactionView","useQuery","API","refetch","allCategories","useMutation","mutate","history","useHistory","then","goBack"],"mappings":"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","file":"static/js/6.e815f21b.chunk.js","sourcesContent":["\r\nexport const fetchBudget = async () => {\r\n\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/1/?_embed=transactions`);\r\n    console.log(process.env.REACT_APP_API_URL)\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\nexport const fetchBudgetedCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/1/budgetCategories`);\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n        {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n\r\n    return await response.json();\r\n}\r\n\r\n","\r\n\r\nexport const fetchAllCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`);\r\n    const data = response.json();\r\n    return data;\r\n}","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nexport default {\r\n    budget,\r\n    common,\r\n}","import styled, { css } from 'styled-components'\r\n\r\nconst btn = (light, dark) => css`\r\n  white-space: nowrap;\r\n  display: inline-block;\r\n  border-radius: 5px;\r\n  padding: 5px 15px;\r\n  font-size: 16px;\r\n  color: white;\r\n  &:visited {\r\n    color: white;\r\n  }\r\n  background-image: linear-gradient(${light}, ${dark});\r\n  border: 1px solid ${dark};\r\n  &:hover {\r\n    background-image: linear-gradient(${light}, ${dark});\r\n    &[disabled] {\r\n      background-image: linear-gradient(${light}, ${dark});\r\n    }\r\n  }\r\n  &:visited {\r\n    color: black;\r\n  }\r\n  &[disabled] {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n  }\r\n`\r\n\r\nconst btnDefault = css`\r\n  ${btn('#ffffff', '#d5d5d5')} color: #555;\r\n`\r\n\r\nconst btnPrimary = btn('#4f93ce', '#285f8f')\r\n\r\nexport default styled.div`\r\n  font-family: sans-serif;\r\n\r\n  h1 {\r\n    text-align: center;\r\n    color: #222;\r\n  }\r\n\r\n  & > div {\r\n    text-align: center;\r\n  }\r\n\r\n  a {\r\n    display: block;\r\n    text-align: center;\r\n    color: #222;\r\n  }\r\n\r\n  form {\r\n    max-width: 500px;\r\n    margin: 10px auto;\r\n    border: 1px solid #ccc;\r\n    padding: 20px;\r\n    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);\r\n    border-radius: 3px;\r\n\r\n    & > div {\r\n      display: flex;\r\n      flex-flow: row nowrap;\r\n      line-height: 2em;\r\n      margin: 5px;\r\n      & > label {\r\n        color: #333;\r\n        width: 110px;\r\n        font-size: 1em;\r\n        line-height: 32px;\r\n      }\r\n      & > input,\r\n      & > select,\r\n      & > textarea {\r\n        flex: 1;\r\n        padding: 3px 5px;\r\n        font-size: 1em;\r\n        margin-left: 15px;\r\n        border: 1px solid #ccc;\r\n        border-radius: 3px;\r\n      }\r\n      & > input[type='checkbox'] {\r\n        margin-top: 7px;\r\n      }\r\n      & > div {\r\n        margin-left: 16px;\r\n        & > label {\r\n          display: block;\r\n          & > input {\r\n            margin-right: 3px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    & > .buttons {\r\n      display: flex;\r\n      flex-flow: row nowrap;\r\n      justify-content: center;\r\n      margin-top: 15px;\r\n    }\r\n    button {\r\n      margin: 0 10px;\r\n      &[type='submit'] {\r\n        ${btnPrimary};\r\n      }\r\n      &[type='button'] {\r\n        ${btnDefault};\r\n      }\r\n    }\r\n    pre {\r\n      border: 1px solid #ccc;\r\n      background: rgba(0, 0, 0, 0.1);\r\n      box-shadow: inset 1px 1px 3px rgba(0, 0, 0, 0.2);\r\n      padding: 20px;\r\n    }\r\n  }\r\n`\r\n","import React from 'react';\r\nimport { Form, Field } from 'react-final-form'\r\nimport { groupBy, noop } from 'lodash'\r\nimport { useMemo } from 'react';\r\nimport Styles from './Styles'\r\n\r\n\r\nconst required = value => (value ? undefined : 'Required')\r\n\r\nfunction AddTransactionForm({ onSubmit = noop, categories, groupCategoriesBy }) {\r\n\r\n    const groupedCategoriesByParentName = groupCategoriesBy ?\r\n        groupBy(categories, groupCategoriesBy) : null;\r\n\r\n    const listItem = useMemo(() => groupedCategoriesByParentName ?\r\n        Object.entries(groupedCategoriesByParentName).map(([parentName, categories]) => (\r\n            <optgroup key={parentName} label={parentName}>\r\n                {categories.map(category => (\r\n                    <option key={category.id} value={category.id}>{category.name}</option>\r\n                ))}\r\n            </optgroup>\r\n        )) : categories.map(category => (\r\n            <option value={category.id}>{category.name}</option>\r\n        )),\r\n        [groupedCategoriesByParentName, categories]\r\n    );\r\n\r\n\r\n    return (\r\n        <Styles>\r\n            <Form\r\n                onSubmit={onSubmit}\r\n                render={({ handleSubmit, form, submitting, pristine, values }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Field name=\"description\" validate={required}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>Description </label>\r\n                                    <input {...input} type=\"text\" placeholder=\"Description\" />\r\n                                    {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"amount\" validate={required} parse={value => parseFloat(value, 10)}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>Amount</label>\r\n                                    <input {...input} type=\"number\" placeholder=\"Amount\" step='0.01' />\r\n                                    {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"categoryId\" validate={required}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>Category</label>\r\n                                    <select {...input} type=\"text\" placeholder=\"Category\" >\r\n                                        {listItem}\r\n                                    </select>\r\n                                    {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"date\" validate={required}>\r\n                            {({ input, meta }) => (\r\n                                <div>\r\n                                    <label>Date</label>\r\n                                    <input {...input} type=\"date\" placeholder=\"Date\" />\r\n                                    {meta.error && meta.touched && <span>{meta.error}</span>}\r\n                                </div>\r\n                            )}\r\n                        </Field>\r\n\r\n                        <div className=\"buttons\">\r\n                            <button type=\"submit\" disabled={submitting}>\r\n                                Submit\r\n              </button>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={form.reset}\r\n                                disabled={submitting || pristine}\r\n                            >\r\n                                Reset\r\n              </button>\r\n                        </div>\r\n                        <pre>{JSON.stringify(values, 0, 2)}</pre>\r\n                    </form>\r\n                )}\r\n            />\r\n        </Styles>\r\n    )\r\n}\r\nexport default AddTransactionForm;","import React from 'react';\r\nimport { useMutation, useQuery } from 'react-query';\r\nimport API from 'data/fetch';\r\nimport AddTransactionForm from './AddTransactionForm';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nfunction AddTransactionView() {\r\n    const { data: budget, refetch } = useQuery('budget', API.budget.fetchBudget);\r\n    const { data: allCategories } = useQuery('allCategories', API.common.fetchAllCategories);\r\n\r\n    const [mutate] = useMutation(API.budget.addTransaction)\r\n\r\n\r\n    const history = useHistory();\r\n\r\n    const handleOnSubmitAddTransaction = (values) => {\r\n        mutate({\r\n            budgetId: budget.id,\r\n            data: values,\r\n        }).then(() => refetch())\r\n            .then(() => history.goBack())\r\n    }\r\n\r\n    return (\r\n        <AddTransactionForm\r\n            categories={allCategories}\r\n            groupCategoriesBy={'parentCategory.name'}\r\n            onSubmit={handleOnSubmitAddTransaction}\r\n        />\r\n    )\r\n}\r\nexport default AddTransactionView;"],"sourceRoot":""}