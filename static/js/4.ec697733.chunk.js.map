{"version":3,"sources":["data/fetch/budget.fetch.js","data/fetch/common.fetch.js","data/fetch/index.js","utils/index.js","pages/Budget/components/BudgetCategoryList/BudgetCategoryList.css.js","pages/Budget/components/BudgetCategoryList/ParentCateory.js","pages/Budget/components/BudgetCategoryList/CategoryItem.js","pages/Budget/components/BudgetCategoryList/BudgetCategoryList.js"],"names":["fetchBudget","a","fetch","process","response","console","log","json","data","fetchBudgetedCategories","addTransaction","budgetId","method","headers","body","JSON","stringify","fetchAllCategories","budget","common","formatCurrency","value","number","Number","Intl","NumberFormat","style","currency","format","formatDate","string","date","Date","DateTimeFormat","ParentCategory","styled","div","CategoryItem","CategoryAmount","negative","name","onClick","categories","transactions","amount","categoryLeftValue","useMemo","budgeted","reduce","acc","category","error","spentOnParentCategory","filter","transaction","find","categoryId","amountValue","item","spentOnCategory","id","totalLeft","BudgetCategoryList","useQuery","API","allCategories","budgetedCategories","dispatch","useContext","BudgetContext","store","setSelectedCategoryId","useCallback","type","payload","budgetedCategoriesByParent","groupBy","parentCategory","handleClickParentCategoryRef","useRef","handleClearParentCategory","current","handleSelectRestParentCategories","listItem","Object","entries","map","parentName","Trigger","children","budgetedCategory","key","totalSpent","restToSpent","totalAmount","amountTaken","categoryExpenses","Math","max","notBudgetedTransactions","notBudgetedExpenses","avaibleForRestCategories","ToggleableList","items","clickRef"],"mappings":"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","file":"static/js/4.ec697733.chunk.js","sourcesContent":["\r\nexport const fetchBudget = async () => {\r\n\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/1/?_embed=transactions`);\r\n    console.log(process.env.REACT_APP_API_URL)\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\nexport const fetchBudgetedCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/1/budgetCategories`);\r\n    const data = await response.json();\r\n    return data;\r\n}\r\n\r\nexport const addTransaction = async ({ budgetId, data }) => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/budgets/${budgetId}/transactions`,\r\n        {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n\r\n    return await response.json();\r\n}\r\n\r\n","\r\n\r\nexport const fetchAllCategories = async () => {\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL}/categories/?_expand=parentCategory`);\r\n    const data = response.json();\r\n    return data;\r\n}","import * as budget from './budget.fetch';\r\nimport * as common from './common.fetch';\r\n\r\nexport default {\r\n    budget,\r\n    common,\r\n}","export const formatCurrency = (value) => {\r\n    const number = Number(value);\r\n\r\n    return new Intl.NumberFormat('pl', { style: 'currency', currency: 'PLN' }).format(number);\r\n}\r\n\r\nexport const formatDate = string => {\r\n    const date = new Date(string);\r\n\r\n    return new Intl.DateTimeFormat('pl').format(date)\r\n}","import styled from 'styled-components'\r\n\r\nexport const ParentCategory = styled.div`\r\nborder: 1px solid black;\r\nmargin-bottom: 1px;\r\npadding: 10px;\r\ndisplay: flex;\r\njustify-content: space-between;\r\n`;\r\n\r\nexport const CategoryItem = styled.div`\r\nborder: 1px solid black;\r\n\r\n`;\r\n\r\nexport const CategoryAmount = styled.div`\r\nfont-weight: 700;\r\ncolor: ${({ negative }) => negative ? 'red' : '#00CC00'}\r\n`;\r\n","import React from 'react';\r\nimport { ParentCategory as Root, CategoryAmount } from './BudgetCategoryList.css'\r\nimport { useMemo } from 'react';\r\nimport { formatCurrency } from 'utils/index'\r\n\r\n\r\nfunction ParentCategory({ name, onClick, categories, transactions, amount }) {\r\n    const categoryLeftValue = useMemo(() => {\r\n        if (!!amount) return null;\r\n\r\n        const budgeted = (() => {\r\n            try {\r\n                return categories.reduce((acc, category) => acc + category.budget, 0);\r\n            } catch (error) {\r\n                return null;\r\n            }\r\n\r\n        })();\r\n\r\n        const parentCategoryTransactions = transactions.filter(transaction => categories.find(category => category.categoryId === transaction.categoryId));\r\n\r\n        const spentOnParentCategory = parentCategoryTransactions.reduce((acc, transaction) => acc + transaction.amount, 0);\r\n\r\n        const totalLeft = budgeted ? budgeted - spentOnParentCategory : null;\r\n\r\n        return totalLeft;\r\n    }, [categories, transactions, amount])\r\n\r\n    const amountValue = useMemo(\r\n        () => amount || categoryLeftValue,\r\n        [categoryLeftValue, amount]\r\n    )\r\n    return (\r\n        <Root onClick={onClick}>\r\n            <span>{name}</span>\r\n            <CategoryAmount negative={amountValue < 0}>{formatCurrency(amountValue)}</CategoryAmount>\r\n        </Root>\r\n    )\r\n}\r\n\r\nexport default ParentCategory;","import React from 'react';\r\nimport { CategoryItem as Root, CategoryAmount } from './BudgetCategoryList.css';\r\nimport { formatCurrency } from 'utils';\r\n\r\nfunction CategoryItem({ name, item, transactions }) {\r\n    const categoryTransactions = transactions\r\n        .filter(transaction => transaction.id === item.id);\r\n\r\n    const spentOnCategory = categoryTransactions.reduce((acc, transaction) => acc + transaction.amount, 0);\r\n\r\n    const totalLeft = item.budget - spentOnCategory;\r\n\r\n    return (\r\n        <Root>\r\n            <span>{name}</span>\r\n            <CategoryAmount negative={totalLeft < 0}>{formatCurrency(totalLeft)}</CategoryAmount>\r\n        </Root>\r\n    )\r\n}\r\n\r\nexport default CategoryItem;","import React, { useRef, useContext } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { groupBy } from 'lodash';\r\nimport ToggleableList from 'components/ToggleableList';\r\nimport ParentCategory from './ParentCateory';\r\nimport CategoryItem from './CategoryItem';\r\nimport 'styled-components/macro';\r\nimport { useMemo, useCallback } from 'react';\r\nimport { useQuery } from 'react-query';\r\nimport API from 'data/fetch';\r\nimport BudgetContext from 'data/context/budget.context'\r\n\r\nfunction BudgetCategoryList() {\r\n    const { data: budget } = useQuery('budget', API.budget.fetchBudget);\r\n    const { data: allCategories } = useQuery('allCategories', API.common.fetchAllCategories);\r\n    const { data: budgetedCategories } = useQuery(\r\n        'budgetedCategories',\r\n        API.budget.fetchBudgetedCategories\r\n    );\r\n    const { dispatch } = useContext(BudgetContext.store);\r\n    const setSelectedCategoryId = useCallback((id) => dispatch({\r\n        type: 'selectParentCategoryId',\r\n        payload: id,\r\n    }), [dispatch])\r\n\r\n    const budgetedCategoriesByParent = useMemo(\r\n        () => groupBy(\r\n            budgetedCategories, item => allCategories.find(category => category.id === item.categoryId).parentCategory.name),\r\n        [budgetedCategories, allCategories]\r\n    );\r\n\r\n    const handleClickParentCategoryRef = useRef(null)\r\n\r\n    const handleClearParentCategory = useCallback(() => {\r\n        setSelectedCategoryId();\r\n        handleClickParentCategoryRef.current();\r\n    },\r\n        [setSelectedCategoryId, handleClickParentCategoryRef]\r\n    )\r\n\r\n    const handleSelectRestParentCategories = useCallback(() => {\r\n        setSelectedCategoryId(null);\r\n        handleClickParentCategoryRef.current();\r\n    },\r\n        [setSelectedCategoryId, handleClickParentCategoryRef]\r\n    )\r\n\r\n\r\n\r\n    const listItem = useMemo(() => Object.entries(budgetedCategoriesByParent).map(([parentName, categories]) => ({\r\n        id: parentName,\r\n        Trigger: ({ onClick }) => (\r\n            <ParentCategory\r\n                name={parentName}\r\n                onClick={() => {\r\n                    onClick(parentName);\r\n                    setSelectedCategoryId(parentName);\r\n                }}\r\n                categories={categories}\r\n                transactions={budget.transactions}\r\n            />\r\n        ),\r\n        children: categories.map(budgetedCategory => {\r\n            const { name } = allCategories.find(category => category.id === budgetedCategory.categoryId)\r\n\r\n            return (\r\n                <CategoryItem\r\n                    key={budgetedCategory.id}\r\n                    name={name}\r\n                    item={budgetedCategory}\r\n                    transactions={budget.transactions}\r\n                />\r\n            )\r\n        })\r\n    })),\r\n        [allCategories, budget.transactions, budgetedCategoriesByParent, setSelectedCategoryId]\r\n    )\r\n\r\n    const totalSpent = useMemo(() => budget.transactions.reduce((acc, transaction) => acc + transaction.amount, 0),\r\n        [budget.transactions]\r\n    );\r\n    const restToSpent = useMemo(() => (budget.totalAmount - totalSpent), [budget.totalAmount, totalSpent]);\r\n\r\n    const amountTaken = useMemo(() => budgetedCategories.reduce((acc, budgetedCategory) => {\r\n        const categoryTransactions = budget.transactions\r\n            .filter(transaction => transaction.categoryId === budgetedCategory.id);\r\n        const categoryExpenses = categoryTransactions\r\n            .reduce((acc, transaction) => acc + transaction.amount, 0);\r\n\r\n        return acc + Math.max(categoryExpenses, budgetedCategory.budget);\r\n\r\n    }, 0),\r\n        [budgetedCategories, budget.transactions,]\r\n    )\r\n\r\n    const notBudgetedTransactions = useMemo(() => budget.transactions\r\n        .filter(transaction => {\r\n            return !budgetedCategories\r\n                .find(budgetedCategory => budgetedCategory.id === transaction.categoryId)\r\n        }),\r\n        [budget.transactions, budgetedCategories]\r\n    )\r\n    const notBudgetedExpenses = useMemo(() => notBudgetedTransactions.reduce((acc, transaction) => acc + transaction.amount, 0),\r\n        [notBudgetedTransactions]\r\n    )\r\n\r\n    const avaibleForRestCategories = useMemo(() => (budget.totalAmount - notBudgetedExpenses - amountTaken),\r\n        [budget.totalAmount, notBudgetedExpenses, amountTaken]\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <div css={`\r\n            background-color: lightgray;\r\n        border-bottom: 5px solid white\r\n        `}>\r\n                <ParentCategory\r\n                    name={budget.name}\r\n                    amount={restToSpent}\r\n                    onClick={handleClearParentCategory}\r\n                />\r\n            </div>\r\n            <ToggleableList\r\n                items={listItem}\r\n                clickRef={handleClickParentCategoryRef}\r\n            />\r\n            <div css={`\r\n            background-color: lightgray;\r\n        border-top: 5px solid white\r\n        `}>\r\n                <ParentCategory\r\n                    name=\"Other categories\"\r\n                    amount={avaibleForRestCategories}\r\n                    onClick={handleSelectRestParentCategories}\r\n                />\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BudgetCategoryList;"],"sourceRoot":""}